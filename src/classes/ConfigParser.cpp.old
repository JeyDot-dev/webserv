void	serverConfigParser(WebServ &server, std::vector<std::vector<std::string>> tokensVector) {
	for (std::vector<std::vector>::iterator vectorIt = tokensVector.begin(); vectorIt != tokensVector.end(); vectorIt++) {
		for (int i = 0; i < stringArraySize(server_config); i++) {
			if (*vectorIt[0] == server_config[i]) {
				serverConfigSwitcher(i, *vectorIt);
			}
		}
	}
}

std::vector<std::string>	getBracketBlock(std::string line, std::ifstream &filestream) {
	std::std::vector<std::string>	block;
	unsigned int		openBracket = 0;

	while (line) {
		std::string			token;
		std::istringstream	iss(line);
		while (iss >> token) {
			block.push_back(token);
			if (token == '{')
				openBracket++;
			else if (token == '}')
				openBracket--;
			token.clear();
		}
		if (!openBracket)
			break;
		
	}
	if (openBracket)
		throw std::runtime_error("Opened Bracket in config file");
	return	block;
}

std::vector<std::vector<std::string>>	serverConfigTokenizer(std::ifstream &filestream) {
	std::vector<std::vector<std::string>>	serverTokensVector;
	std::vector<std::string>				serverTokens;
	std::string								line;

	while (std::getline(filestream, line)) {
		std::string			token;
		std::istringstream	iss(line);
		if (line.find("{")) {
			serverTokens = getBracketBlock(line, filestream);
		}
		else {
			while (iss >> token) {
				serverTokens.push_back(token);
				token.clear();
			}
		}
		serverTokensVector.push_back(serverTokens);
		serverTokens.clear();
	}
}

std::map<int, WebServ>	configFileParser(std::string filename) {

}

void	handleListen(WebServ &server, std::vector<std::string> tokens) {
	std::vector<std::string>::iterator	it;
	unsigned int						port;

	for (it = tokens.begin(); it != tokens.end(); it++) {
		port = atoi(it->c_str());
		if (port == 0)
			throw std::runtime_error("Invalid listen port");
		server.setPort(port);
	}
}